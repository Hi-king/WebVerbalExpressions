// Generated by CoffeeScript 1.6.2
var dropview;

dropview = (function() {
  dropview.prototype.functions_toselect = [[".startOfLine", 0, []], [".endOfLine", 0, []], [".beginCapture", 0, []], [".endCapture", 0, []], [".then", 1, ["any"]], [".multiple", 1, ["*,+,number"]]];

  function dropview(refs, model) {
    var $verexinput;

    this.model = model;
    this.$verexinput = $("#verextext");
    this.$dropbox = $(".dropbox");
    this.$regexp = $("#regexp");
    this.$verexpeval = $("#verexeval");
    this.$selectionbox = $("#selectionbox");
    this.$dropbox.droppable({
      accept: ".draggable",
      drop: function(event, ui) {
        return model.updatedropbox(event, ui);
      }
    });
    $verexinput = this.$verexinput;
    this.$verexpeval.click(function() {
      return model.updateregexp($verexinput.val());
    });
    this.initselections();
    this.initcallbacks();
  }

  dropview.prototype.initcallbacks = function() {
    this.model.ondropboxchange(this.dropinto, this);
    this.model.ondropboxchange(this.addinput, this);
    return this.model.onregexpchange(this.showregexp, this);
  };

  dropview.prototype.initselections = function() {
    var $eachselection, $eachselectioncontent, $input, arg, args, defaultval, selection, _i, _j, _len, _ref, _ref1;

    console.log(this.functions_toselect);
    _ref = this.functions_toselect;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      _ref1 = _ref[_i], selection = _ref1[0], args = _ref1[1], defaultval = _ref1[2];
      $eachselection = $('<div class="method draggable">');
      $eachselectioncontent = $("<p>" + selection + "(</p>");
      for (arg = _j = 0; 0 <= args ? _j < args : _j > args; arg = 0 <= args ? ++_j : --_j) {
        $input = $('<input type="text" />');
        if (defaultval[arg] != null) {
          $input.val(defaultval[arg]);
          $input.addClass("defaultval");
          $input.one('focus', function() {
            $(this).val('');
            return $(this).removeClass("defaultval");
          });
        }
        $eachselectioncontent.append($input);
      }
      $eachselectioncontent.append(")");
      $eachselection.append($eachselectioncontent);
      $eachselection.bind("content", function() {
        args = "";
        $(this).find("input").each(function() {
          return args += '\"' + $(this).val() + '\"' + ",";
        });
        args = args.slice(0, -1);
        return $(this).attr("content", $(this).text().slice(0, -1) + args + ")");
      });
      this.$selectionbox.append($eachselection);
    }
    this.$draggables = $(".draggable");
    return this.$draggables.draggable({
      start: function() {
        console.log($(this).find("p").text());
        console.log($(this).trigger("content"));
        return console.log($(this).attr("content"));
      },
      helper: "clone",
      appendTo: "body"
    });
  };

  dropview.prototype.addinput = function($obj, context) {
    var content;

    content = context.model.extractcontent($obj);
    context.$verexinput.val(context.$verexinput.val() + content);
    return context.model.updateregexp(context.$verexinput.val());
  };

  dropview.prototype.dropinto = function($obj, context) {
    return context.$dropbox.append($obj);
  };

  dropview.prototype.showregexp = function(regexp, context) {
    return context.$regexp.text(regexp);
  };

  return dropview;

})();
